;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 2/28/2020 3:07:39 PM
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0x2830      	GOTO       48
_interrupt:
;Circuit 3.c,122 :: 		void interrupt (void){                       ////
;Circuit 3.c,124 :: 		if(PIR4.b4 && PSMC1INT.b1) {            ////
0x0004	0x3180      	MOVLP      0
0x0005	0x0020      	MOVLB      0
0x0006	0x1E14      	BTFSS      PIR4, 4
0x0007	0x2812      	GOTO       L_interrupt3
0x0008	0x003D      	MOVLB      29
0x0009	0x1CA0      	BTFSS      PSMC1INT, 1
0x000A	0x2812      	GOTO       L_interrupt3
L__interrupt44:
;Circuit 3.c,125 :: 		PSMC1INT.b1 = 0;             ////
0x000B	0x10A0      	BCF        PSMC1INT, 1
;Circuit 3.c,126 :: 		PIR4.b4 = 0;                 ////
0x000C	0x0020      	MOVLB      0
0x000D	0x1214      	BCF        PIR4, 4
;Circuit 3.c,127 :: 		V_RDY = 1;                   ////
0x000E	0x3001      	MOVLW      1
0x000F	0x00A0      	MOVWF      _V_RDY
0x0010	0x3000      	MOVLW      0
0x0011	0x00A1      	MOVWF      _V_RDY+1
;Circuit 3.c,128 :: 		}                                       ////
L_interrupt3:
;Circuit 3.c,129 :: 		}                                          ////
L_end_interrupt:
L__interrupt50:
0x0012	0x0009      	RETFIE     %s
; end of _interrupt
___CC2DW:
;__Lib_System.c,71 :: 		
;__Lib_System.c,73 :: 		
_CC2DL_Loop1:
;__Lib_System.c,74 :: 		
0x0013	0x0012      	MOVIW      FSR0++ 
;__Lib_System.c,75 :: 		
0x0014	0x001E      	MOVWI      FSR1++ 
;__Lib_System.c,76 :: 		
0x0015	0x03F0      	DECF       R0, 1
;__Lib_System.c,77 :: 		
0x0016	0x1D03      	BTFSS      STATUS, 2
;__Lib_System.c,78 :: 		
0x0017	0x2813      	GOTO       _CC2DL_Loop1
;__Lib_System.c,79 :: 		
0x0018	0x03F1      	DECF       R1, 1
;__Lib_System.c,80 :: 		
0x0019	0x1D03      	BTFSS      STATUS, 2
;__Lib_System.c,81 :: 		
0x001A	0x2813      	GOTO       _CC2DL_Loop1
;__Lib_System.c,83 :: 		
L_end___CC2DW:
0x001B	0x0008      	RETURN
; end of ___CC2DW
_set_DC:
;Circuit 3.c,135 :: 		void set_DC(int duty) {
;Circuit 3.c,136 :: 		PSMC1DCL=(char) (duty & 0x00FF);
0x001C	0x30FF      	MOVLW      255
0x001D	0x0020      	MOVLB      0
0x001E	0x0522      	ANDWF      FARG_set_DC_duty, 0
0x001F	0x003D      	MOVLB      29
0x0020	0x00A3      	MOVWF      PSMC1DCL
;Circuit 3.c,137 :: 		PSMC1DCH= (char)((duty & 0xFF00)>>8);
0x0021	0x3000      	MOVLW      0
0x0022	0x0020      	MOVLB      0
0x0023	0x0522      	ANDWF      FARG_set_DC_duty, 0
0x0024	0x00F3      	MOVWF      R3
0x0025	0x0823      	MOVF       FARG_set_DC_duty+1, 0
0x0026	0x39FF      	ANDLW      255
0x0027	0x00F4      	MOVWF      R4
0x0028	0x0874      	MOVF       R4, 0
0x0029	0x00F0      	MOVWF      R0
0x002A	0x01F1      	CLRF       R1
0x002B	0x0870      	MOVF       R0, 0
0x002C	0x003D      	MOVLB      29
0x002D	0x00A4      	MOVWF      PSMC1DCH
;Circuit 3.c,138 :: 		PSMC1CON.b6 = 1;          //load buffer update
0x002E	0x1711      	BSF        PSMC1CON, 6
;Circuit 3.c,139 :: 		}
L_end_set_DC:
0x002F	0x0008      	RETURN
; end of _set_DC
_main:
0x0030	0x0020      	MOVLB      0
0x0031	0x01A0      	CLRF       _V_RDY
0x0032	0x01A1      	CLRF       33
;Circuit 3.c,13 :: 		void main() {
;Circuit 3.c,22 :: 		OSCCON.b6 = 1;
0x0033	0x0021      	MOVLB      1
0x0034	0x1719      	BSF        OSCCON, 6
;Circuit 3.c,23 :: 		OSCCON.b5 = 1;
0x0035	0x1699      	BSF        OSCCON, 5
;Circuit 3.c,24 :: 		OSCCON.b4 = 0;
0x0036	0x1219      	BCF        OSCCON, 4
;Circuit 3.c,25 :: 		OSCCON.b3 = 1;
0x0037	0x1599      	BSF        OSCCON, 3
;Circuit 3.c,29 :: 		CM1CON0.b7 = 0;
0x0038	0x0022      	MOVLB      2
0x0039	0x1391      	BCF        CM1CON0, 7
;Circuit 3.c,30 :: 		CM2CON0.b7 = 0;
0x003A	0x1393      	BCF        CM2CON0, 7
;Circuit 3.c,31 :: 		CM3CON0.b7 = 0;
0x003B	0x139E      	BCF        CM3CON0, 7
;Circuit 3.c,32 :: 		CM4CON0.b7 = 0;
0x003C	0x139A      	BCF        CM4CON0, 7
;Circuit 3.c,37 :: 		FVRCON.b7 = 1;
0x003D	0x1797      	BSF        FVRCON, 7
;Circuit 3.c,38 :: 		FVRCON.b1 = 1;
0x003E	0x1497      	BSF        FVRCON, 1
;Circuit 3.c,39 :: 		FVRCON.b0 = 0;
0x003F	0x1017      	BCF        FVRCON, 0
;Circuit 3.c,41 :: 		ADCON0 = 0b00000001;    //12 bit , channel 0 , enable ADC
0x0040	0x3001      	MOVLW      1
0x0041	0x0021      	MOVLB      1
0x0042	0x009D      	MOVWF      ADCON0
;Circuit 3.c,42 :: 		ADCON1 = 0b11010011;    //2's complement result , Fosc/16 , Vref- = Vss , Vref+ = FVR
0x0043	0x30D3      	MOVLW      211
0x0044	0x009E      	MOVWF      ADCON1
;Circuit 3.c,43 :: 		ADCON2 = 0b00001111;    //negative differential input is same as Vref-
0x0045	0x300F      	MOVLW      15
0x0046	0x009F      	MOVWF      ADCON2
;Circuit 3.c,44 :: 		delay_us(30);
0x0047	0x3009      	MOVLW      9
0x0048	0x00FD      	MOVWF      R13
L_main0:
0x0049	0x0BFD      	DECFSZ     R13, 1
0x004A	0x2849      	GOTO       L_main0
0x004B	0x0000      	NOP
0x004C	0x0000      	NOP
;Circuit 3.c,49 :: 		ANSELA.b3 = 1;
0x004D	0x0023      	MOVLB      3
0x004E	0x158C      	BSF        ANSELA, 3
;Circuit 3.c,50 :: 		ANSELA.b2 = 1;
0x004F	0x150C      	BSF        ANSELA, 2
;Circuit 3.c,51 :: 		ANSELA.b1 = 1;
0x0050	0x148C      	BSF        ANSELA, 1
;Circuit 3.c,52 :: 		ANSELA.b0 = 1;
0x0051	0x140C      	BSF        ANSELA, 0
;Circuit 3.c,55 :: 		TRISA.b3 = 1;
0x0052	0x0021      	MOVLB      1
0x0053	0x158C      	BSF        TRISA, 3
;Circuit 3.c,56 :: 		TRISA.b2 = 1;
0x0054	0x150C      	BSF        TRISA, 2
;Circuit 3.c,57 :: 		TRISA.b1 = 1;
0x0055	0x148C      	BSF        TRISA, 1
;Circuit 3.c,58 :: 		TRISA.b0 = 1;
0x0056	0x140C      	BSF        TRISA, 0
;Circuit 3.c,59 :: 		TRISB.b0 = 1;
0x0057	0x140D      	BSF        TRISB, 0
;Circuit 3.c,62 :: 		TRISA.b4 = 0;
0x0058	0x120C      	BCF        TRISA, 4
;Circuit 3.c,63 :: 		TRISB.b2 = 0;
0x0059	0x110D      	BCF        TRISB, 2
;Circuit 3.c,64 :: 		TRISC.b1 = 0;
0x005A	0x108E      	BCF        TRISC, 1
;Circuit 3.c,66 :: 		OPTION_REG.b7 = 1;  // disable weak pullups
0x005B	0x1795      	BSF        OPTION_REG, 7
;Circuit 3.c,71 :: 		PSMC1CLK = 0b00000000;
0x005C	0x003D      	MOVLB      29
0x005D	0x0194      	CLRF       PSMC1CLK
;Circuit 3.c,74 :: 		PSMC1PRH = 0x01;
0x005E	0x3001      	MOVLW      1
0x005F	0x00A6      	MOVWF      PSMC1PRH
;Circuit 3.c,75 :: 		PSMC1PRL = 0x8F;
0x0060	0x308F      	MOVLW      143
0x0061	0x00A5      	MOVWF      PSMC1PRL
;Circuit 3.c,78 :: 		PSMC1PHH = 0x00;
0x0062	0x01A2      	CLRF       PSMC1PHH
;Circuit 3.c,79 :: 		PSMC1PHL = 0x00;
0x0063	0x01A1      	CLRF       PSMC1PHL
;Circuit 3.c,82 :: 		PSMC1OEN.b0 = 1;
0x0064	0x1415      	BSF        PSMC1OEN, 0
;Circuit 3.c,83 :: 		PSMC1STR0.b0 = 1;
0x0065	0x142E      	BSF        PSMC1STR0, 0
;Circuit 3.c,84 :: 		PSMC1POL = 0b00000000;
0x0066	0x0196      	CLRF       PSMC1POL
;Circuit 3.c,87 :: 		PSMC1PRS = 0b00000001;
0x0067	0x3001      	MOVLW      1
0x0068	0x009C      	MOVWF      PSMC1PRS
;Circuit 3.c,88 :: 		PSMC1PHS = 0b00000001;
0x0069	0x3001      	MOVLW      1
0x006A	0x009A      	MOVWF      PSMC1PHS
;Circuit 3.c,89 :: 		PSMC1DCS = 0b00000001;
0x006B	0x3001      	MOVLW      1
0x006C	0x009B      	MOVWF      PSMC1DCS
;Circuit 3.c,92 :: 		PSMC1CON = 0b11000000;
0x006D	0x30C0      	MOVLW      192
0x006E	0x0091      	MOVWF      PSMC1CON
;Circuit 3.c,95 :: 		TRISC.b0 = 0;
0x006F	0x0021      	MOVLB      1
0x0070	0x100E      	BCF        TRISC, 0
;Circuit 3.c,99 :: 		set_DC(20);
0x0071	0x3014      	MOVLW      20
0x0072	0x0020      	MOVLB      0
0x0073	0x00A2      	MOVWF      FARG_set_DC_duty
0x0074	0x3000      	MOVLW      0
0x0075	0x00A3      	MOVWF      FARG_set_DC_duty+1
0x0076	0x201C      	CALL       _set_DC
;Circuit 3.c,117 :: 		}
L_end_main:
0x0077	0x2877      	GOTO       $+0
; end of _main
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0004      [15]    _interrupt
0x0013       [9]    ___CC2DW
0x001C      [20]    _set_DC
0x0030      [72]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    INDF0
0x0001       [1]    INDF1
0x0003       [1]    STATUS
0x0004       [1]    FSR0L
0x0005       [1]    FSR0H
0x0006       [1]    FSR1L
0x0007       [1]    FSR1H
0x000A       [1]    PCLATH
0x0014       [1]    PIR4
0x0020       [2]    _V_RDY
0x0022       [2]    FARG_set_DC_duty
0x0070       [1]    R0
0x0071       [1]    R1
0x0072       [1]    R2
0x0073       [1]    R3
0x0074       [1]    R4
0x0075       [1]    R5
0x0076       [1]    R6
0x0077       [1]    R7
0x0078       [1]    R8
0x0079       [1]    R9
0x007A       [1]    R10
0x007B       [1]    R11
0x007C       [1]    R12
0x007D       [1]    R13
0x007E       [1]    R14
0x007F       [1]    R15
0x008C       [1]    TRISA
0x008D       [1]    TRISB
0x008E       [1]    TRISC
0x0095       [1]    OPTION_REG
0x0099       [1]    OSCCON
0x009D       [1]    ADCON0
0x009E       [1]    ADCON1
0x009F       [1]    ADCON2
0x0111       [1]    CM1CON0
0x0113       [1]    CM2CON0
0x0117       [1]    FVRCON
0x011A       [1]    CM4CON0
0x011E       [1]    CM3CON0
0x018C       [1]    ANSELA
0x0E91       [1]    PSMC1CON
0x0E94       [1]    PSMC1CLK
0x0E95       [1]    PSMC1OEN
0x0E96       [1]    PSMC1POL
0x0E9A       [1]    PSMC1PHS
0x0E9B       [1]    PSMC1DCS
0x0E9C       [1]    PSMC1PRS
0x0EA0       [1]    PSMC1INT
0x0EA1       [1]    PSMC1PHL
0x0EA2       [1]    PSMC1PHH
0x0EA3       [1]    PSMC1DCL
0x0EA4       [1]    PSMC1DCH
0x0EA5       [1]    PSMC1PRL
0x0EA6       [1]    PSMC1PRH
0x0EAE       [1]    PSMC1STR0
